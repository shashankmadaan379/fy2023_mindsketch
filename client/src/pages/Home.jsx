import React, { useEffect, useState } from "react";
import "./home.css";
import Loader from "../components/Loader";
import Card from "../components/Card";
const Home = () => {
  useEffect(() => {
    const fetchPosts = async () => {
      setloading(true);

      try {
        const response = await fetch("http://localhost:8000/api/v1/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
        if (response.ok) {
          const result = await response.json();
          setallPosts(result.data.reverse());
        }
      } catch (error) {
        alert(error);
      } finally {
        setloading(false);
      }
    };
    fetchPosts();
  }, []);
  const [loading, setloading] = useState(false);
  const [allPosts, setallPosts] = useState(null);
  const [searchText, setsearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
      return data.map((post) => <Card key={post._id} {...post} />);
    }
    return <h2 className="search-results">{title}</h2>;
  };
  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setsearchText(e.target.value);
    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResults);
      }, 500)
    );
  };

  return (
    <section className="home-section">
      <div>
        <h1 className="home-heading">The Community Showcase</h1>
        <p className="home-para">
          Browse through a collection of imaginative and visually stunning
          images generated by MindSketch
        </p>
      </div>
      <div className="home-search">
        <label className="home-label" htmlFor="name">Search Posts:</label>
        <input
          className="home-input"
          type="text"
          name="text"
          placeholder="Search posts..."
          value={searchText}
          onChange={handleSearchChange}
        ></input>
      </div>

      <div>
        {loading ? (
          <div className="home-loader">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="home-results">
                Showing results for <span className="searchtext">{searchText}</span>
              </h2>
            )}
            <div className="home-card">
              {searchText ? (
                <RenderCards data={[]} title="No search results found" />
              ) : (
                <RenderCards data={allPosts} title="No posts found" />
              )}
            </div>
          </>
        )}
        {console.log(searchText)}
      </div>
    </section>
  );
};
export default Home;
